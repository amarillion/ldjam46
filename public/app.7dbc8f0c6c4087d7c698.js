!function(e){function t(t){for(var i,a,n=t[0],c=t[1],h=t[2],l=0,p=[];l<n.length;l++)a=n[l],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&p.push(o[a][0]),o[a]=0;for(i in c)Object.prototype.hasOwnProperty.call(c,i)&&(e[i]=c[i]);for(d&&d(t);p.length;)p.shift()();return r.push.apply(r,h||[]),s()}function s(){for(var e,t=0;t<r.length;t++){for(var s=r[t],i=!0,n=1;n<s.length;n++){var c=s[n];0!==o[c]&&(i=!1)}i&&(r.splice(t--,1),e=a(a.s=s[0]))}return e}var i={},o={0:0},r=[];function a(t){if(i[t])return i[t].exports;var s=i[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,a),s.l=!0,s.exports}a.m=e,a.c=i,a.d=function(e,t,s){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)a.d(s,i,function(t){return e[t]}.bind(null,i));return s},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="";var n=window.webpackJsonp=window.webpackJsonp||[],c=n.push.bind(n);n.push=t,n=n.slice();for(var h=0;h<n.length;h++)t(n[h]);var d=c;r.push([1468,1]),s()}({1468:function(e,t,s){"use strict";s.r(t);var i=s(12),o=s.n(i),r=s(550),a=s.n(r),n=class extends o.a.Scene{constructor(){super({key:"BootScene"})}preload(){this.fontsReady=!1,this.fontsLoaded=this.fontsLoaded.bind(this),this.add.text(100,100,"loading fonts..."),this.load.image("loaderBg","./assets/images/loader-bg.png"),this.load.image("loaderBar","./assets/images/loader-bar.png"),a.a.load({google:{families:["Bangers"]},active:this.fontsLoaded})}update(){this.fontsReady&&this.scene.start("SplashScene")}fontsLoaded(){this.fontsReady=!0}},c=class extends o.a.Scene{constructor(){super({key:"SplashScene"})}preload(){this.load.image("mushroom","assets/images/mushroom2.png")}create(){this.scene.start("GameScene")}update(){}};function h(e){return Math.floor(Math.random()*Math.floor(e))}const d=0,l=1,p=2,u=0,m=2,g=3,f=[{name:"unnamed_algae_0",role:l,interactionMap:{5:m,6:g},biotopeTolerances:{0:1,1:.5,2:.5,3:.5,4:.5,5:.5,6:.1,7:.5},optimalTemperature:200,backstory:null,profilePictureKey:null,tileIndex:null,color:16776960},{name:"unnamed_herbivore_1",role:p,interactionMap:{0:u,3:u},biotopeTolerances:{0:1,1:1,2:.5,3:.5,4:.1,5:.5,6:.5,7:.5},optimalTemperature:200,backstory:null,profilePictureKey:null,tileIndex:null,color:16711935},{name:"unnamed_fungus_2",role:d,interactionMap:{3:g},biotopeTolerances:{0:.5,1:1,2:.5,3:.1,4:.5,5:.5,6:.5,7:.5},optimalTemperature:200,backstory:null,profilePictureKey:null,tileIndex:null,color:65535},{name:"unnamed_algae_3",role:l,interactionMap:{5:m,6:g},biotopeTolerances:{0:1,1:.5,2:.5,3:.5,4:.5,5:.5,6:.1,7:.5},optimalTemperature:200,backstory:null,profilePictureKey:null,tileIndex:null,color:16711680}];class b extends Error{constructor(e){super(e)}}function y(e,t){if(!e)throw console.error(t),new b(t)}class w{constructor(e,t){this.x=e,this.y=t,this.deadBiomass=10,this.co2=1e3,this.o2=10,this.h2o=1e3,this.temperature=200,this.solarEnergy=1,this._species=[]}sumLivingBiomass(){return this._species.reduce((e,t)=>e+t.biomass,0)}get species(){return this._species}addSpecies(e,t){const s=this._species.find(t=>t.speciesId===e);s?(s.biomass+=t,this.sortSpecies()):(this._species.push({speciesId:e,biomass:t}),this.maxSpeciesCheck())}maxSpeciesCheck(){if(this.sortSpecies(),this._species.length>8){const e=this._species.pop();this.deadBiomass+=e.biomass}}sortSpecies(){this._species.sort((e,t)=>t.biomass-e.biomass)}speciesToString(){return this._species.map(e=>`${e.speciesId}: ${e.biomass.toFixed(1)} `).join()}toString(){return`[${this.x}, ${this.y}] CO2: ${this.co2.toFixed(1)} H2O: ${this.h2o.toFixed(1)} O2: ${this.o2.toFixed(1)} Organic: ${this.deadBiomass.toFixed(1)} Species: `+this.speciesToString()}growAndDie(){for(const e of this._species){const t=f[e.speciesId];if(t.role===l){const t=3e-4*Math.min(this.co2,this.h2o),s=Math.min(e.biomass*t,this.co2,this.o2);y(s>=0),this.co2-=s,this.h2o-=s,this.o2+=s,e.biomass+=s,y(e.biomass>=0)}else if(t.role===p)for(const s of this._species){if(s.speciesId===e.speciesId)continue;if(t.interactionMap[s.speciesId]===u){const t=.001*s.biomass,i=Math.min(e.biomass*t,s.biomass);y(i>=0),s.biomass-=i,e.biomass+=i,y(e.biomass>=0),y(s.biomass>=0)}}else if(t.role===d){const t=.001*this.deadBiomass,s=Math.min(e.biomass*t,this.deadBiomass);y(s>=0),this.deadBiomass-=s,e.biomass+=s,y(this.deadBiomass>=0),y(e.biomass>=0)}if(t.role!==l){const t=.001*Math.min(e.biomass,this.o2),s=Math.min(e.biomass,e.biomass*t,this.o2);y(s>=0),this.o2-=s,e.biomass-=s,this.h2o+=s,this.co2+=s,y(this.deadBiomass>=0),y(e.biomass>=0)}const s=1;{y(e.biomass>=0,`Wrong value ${e.biomass} ${e.speciesId}`);const t=.01/s,i=Math.min(e.biomass*t,e.biomass);y(i>=0),this.deadBiomass+=i,e.biomass-=i,y(e.biomass>=0)}y(e.biomass>=0)}y(this.o2>=0),y(this.co2>=0),y(this.h2o>=0),y(this.deadBiomass>=0),this.sortSpecies()}migrateTo(e){if(0!==this._species.length)for(const t of this._species){const s=.01*t.biomass;e.addSpecies(t.speciesId,s),t.biomass-=s}}}const x=(e,t)=>new w(e,t);class _{constructor(e,t,s=x){this.cellFactory=s,this.width=e,this.height=t,this._prepareGrid()}_prepareGrid(){this._data=new Array(this.width*this.height);for(let e=0;e<this.width;++e)for(let t=0;t<this.height;++t)this._data[this._index(e,t)]=this.cellFactory(e,t)}randomCell(){let e=h(this._data.length);return this._data[e]}_index(e,t){return e+t*this.width}get(e,t){return this.inRange(e,t)?this._data[this._index(e,t)]:null}inRange(e,t){return e>=0&&t>=0&&e<this.width&&t<this.height}*eachNode(){for(const e of this._data)e&&(yield e)}*getAdjacent(e){let t=0,s=-1;const i=e.x,o=e.y;for(const e of[1,2,4,8]){const r=(i+t+this.width)%this.width,a=o+s;if(a>=0&&a<this.height){const t=this._data[this._index(r,a)];yield[e,t]}[t,s]=[-s,t]}}}class S{}let k=0;class v{constructor(){this.id=k++,this.dna="",this.calculateProperties()}calculateProperties(){}}class C{constructor(){this.grid=new _(20,10),this.species={},this.planet=new S,this.init(),this.tickCounter=0}init(){for(let e=0;e<4;++e){const e=this.createSpecies();for(let t=0;t<5;++t){this.grid.randomCell().addSpecies(e.id,100)}}}createSpecies(){const e=new v;return this.species[e.id]=e,e}tick(){this.growAndDie(),this.interact(),this.evolve(),this.migrate(),this.updatePlanet(),this.tickCounter+=1}growAndDie(){for(const e of this.grid.eachNode())e.growAndDie()}interact(){}evolve(){}migrate(){for(const e of this.grid.eachNode())for(const[,t]of this.grid.getAdjacent(e))e.migrateTo(t)}updatePlanet(){}}class M extends o.a.GameObjects.Graphics{constructor(e,t,s){super(e,s),this.grid=t,this.prop=()=>1,this.color=16711680,this.update()}setProp(e){this.prop=e}minMax(e){let t=1/0,s=-1/0;for(const i of this.grid.eachNode()){const o=e(i);o<t&&(t=o),o>s&&(s=o)}return{min:t,max:s}}update(){function e(e,t,s){const i=s-t;return i?(e-t)/i:0}this.clear();const t=this.prop,{max:s}=this.minMax(t);for(const i of this.grid.eachNode()){const o=64*i.x,r=64*i.y,a=e(t(i),0,s);this.fillStyle(this.color,a),this.fillRect(o,r,63,63)}}}class P extends o.a.GameObjects.Graphics{constructor(e,t,s){super(e,s),this.grid=t,this.prop=()=>1,this.update()}update(){this.clear();for(const e of this.grid.eachNode()){const t=64*e.x+32,s=64*e.y+32;let i=-16,o=16;for(const{speciesId:r,biomass:a}of e.species.slice(0,4)){if(a<50)continue;const e=f[r].color;this.fillStyle(e,1),this.fillCircle(t+i,s+o,16),[i,o]=[-o,i]}}}}class O extends o.a.GameObjects.Graphics{constructor(e,t){super(e,t),this.mx=0,this.my=0,this.visible=!1,this.update()}setCoord(e,t){this.mx=e,this.my=t,this.visible=!0,this.update()}update(){this.clear();const e=64*this.mx,t=64*this.my;this.lineStyle(1,16777215,1),this.strokeRect(e-1,t-1,66,66)}}var I=class extends o.a.Scene{constructor(){super({key:"GameScene"})}init(){console.log("Game.init called"),this.sim=new C,this.time.addEvent({delay:500,callback:()=>this.tickAndLog(),loop:!0}),this.currentCell=this.sim.grid.get(0,0)}preload(){}create(){console.log("Game.create called"),this.logElement=document.getElementById("log"),this.gridView=new M(this,this.sim.grid),this.speciesView=new P(this,this.sim.grid),this.cursor=new O(this),this.add.existing(this.gridView),this.add.existing(this.speciesView),this.add.existing(this.cursor),this.input.on("pointermove",this.onMouseMove,this),this.input.on("pointerup",this.onMouseClick,this),this.input.keyboard.on("keydown",this.onKeyDown,this),this.setFilter(1);var e=this.input.keyboard.createCursorKeys(),t={camera:this.cameras.main,left:e.left,right:e.right,up:e.up,down:e.down,zoomIn:this.input.keyboard.addKey(o.a.Input.Keyboard.KeyCodes.Q),zoomOut:this.input.keyboard.addKey(o.a.Input.Keyboard.KeyCodes.E),acceleration:.06,drag:5e-4,maxSpeed:1};this.controls=new o.a.Cameras.Controls.SmoothedKeyControl(t),this.add.text(0,0,"Exo Keeper",{font:"32px Bangers",fill:"#7744ff"})}tickAndLog(){this.sim.tick(),this.gridView.update(),this.speciesView.update(),this.logElement.innerText=`Tick: ${this.sim.tickCounter}\n${this.currentCell}`}update(e,t){this.controls.update(t)}toGridCoords({x:e,y:t}){let s=this.cameras.main.getWorldPoint(e,t);return{mx:Math.floor(s.x/64),my:Math.floor(s.y/64)}}onMouseClick(e){const{mx:t,my:s}=this.toGridCoords(e),i=this.sim.grid.get(t,s);i&&(this.currentCell=i)}onMouseMove(e){const{mx:t,my:s}=this.toGridCoords(e);this.sim.grid.inRange(t,s)&&this.cursor.setCoord(t,s)}onKeyDown(e){switch(e.keyCode){case o.a.Input.Keyboard.KeyCodes.ONE:this.setFilter(1),e.stopPropagation();break;case o.a.Input.Keyboard.KeyCodes.TWO:this.setFilter(2),e.stopPropagation();break;case o.a.Input.Keyboard.KeyCodes.THREE:this.setFilter(3),e.stopPropagation();break;case o.a.Input.Keyboard.KeyCodes.FOUR:this.setFilter(4),e.stopPropagation()}}setFilter(e){switch(e){case 1:this.gridView.setProp(e=>e.sumLivingBiomass()),this.gridView.color=8978312;break;case 2:this.gridView.color=65280,this.gridView.setProp(e=>e.co2);break;case 3:this.gridView.color=16746632,this.gridView.setProp(e=>e.o2);break;case 4:this.gridView.color=255,this.gridView.setProp(e=>e.h2o)}}},K={type:o.a.AUTO,parent:"content",localStorageName:"exokeeper",disableContextMenu:!0,fps:{target:20},scale:{mode:o.a.Scale.RESIZE}};const T=Object.assign(K,{scene:[n,c,I]});class B extends o.a.Game{constructor(){super(T)}}window.game=new B}});