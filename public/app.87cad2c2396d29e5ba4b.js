!function(e){function s(s){for(var i,a,n=s[0],c=s[1],h=s[2],d=0,p=[];d<n.length;d++)a=n[d],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&p.push(o[a][0]),o[a]=0;for(i in c)Object.prototype.hasOwnProperty.call(c,i)&&(e[i]=c[i]);for(l&&l(s);p.length;)p.shift()();return r.push.apply(r,h||[]),t()}function t(){for(var e,s=0;s<r.length;s++){for(var t=r[s],i=!0,n=1;n<t.length;n++){var c=t[n];0!==o[c]&&(i=!1)}i&&(r.splice(s--,1),e=a(a.s=t[0]))}return e}var i={},o={0:0},r=[];function a(s){if(i[s])return i[s].exports;var t=i[s]={i:s,l:!1,exports:{}};return e[s].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.m=e,a.c=i,a.d=function(e,s,t){a.o(e,s)||Object.defineProperty(e,s,{enumerable:!0,get:t})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,s){if(1&s&&(e=a(e)),8&s)return e;if(4&s&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&s&&"string"!=typeof e)for(var i in e)a.d(t,i,function(s){return e[s]}.bind(null,i));return t},a.n=function(e){var s=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(s,"a",s),s},a.o=function(e,s){return Object.prototype.hasOwnProperty.call(e,s)},a.p="";var n=window.webpackJsonp=window.webpackJsonp||[],c=n.push.bind(n);n.push=s,n=n.slice();for(var h=0;h<n.length;h++)s(n[h]);var l=c;r.push([1468,1]),t()}({1468:function(e,s,t){"use strict";t.r(s);var i=t(31),o=t.n(i),r=t(550),a=t.n(r),n=class extends o.a.Scene{constructor(){super({key:"BootScene"})}preload(){this.fontsReady=!1,this.fontsLoaded=this.fontsLoaded.bind(this),this.add.text(100,100,"loading fonts..."),this.load.image("loaderBg","./assets/images/loader-bg.png"),this.load.image("loaderBar","./assets/images/loader-bar.png"),a.a.load({google:{families:["Bangers"]},active:this.fontsLoaded})}update(){this.fontsReady&&this.scene.start("SplashScene")}fontsLoaded(){this.fontsReady=!0}},c=class extends o.a.Scene{constructor(){super({key:"SplashScene"})}preload(){this.load.image("mushroom","assets/images/mushroom2.png")}create(){this.scene.start("GameScene")}update(){}};function h(e){return Math.floor(Math.random()*Math.floor(e))}const l=0,d=1,p=2,u=0,m=2,f=3,g=[{name:"unnamed_algae_0",role:d,interactionMap:{5:m,6:f},biotopeTolerances:{0:1,1:.5,2:.5,3:.5,4:.5,5:.5,6:.1,7:.5},optimalTemperature:200,backstory:null,profilePictureKey:null,tileIndex:null,color:16776960},{name:"unnamed_herbivore_1",role:p,interactionMap:{0:u,3:u},biotopeTolerances:{0:1,1:1,2:.5,3:.5,4:.1,5:.5,6:.5,7:.5},optimalTemperature:200,backstory:null,profilePictureKey:null,tileIndex:null,color:16711935},{name:"unnamed_fungus_2",role:l,interactionMap:{3:f},biotopeTolerances:{0:.5,1:1,2:.5,3:.1,4:.5,5:.5,6:.5,7:.5},optimalTemperature:200,backstory:null,profilePictureKey:null,tileIndex:null,color:65535},{name:"unnamed_algae_3",role:d,interactionMap:{5:m,6:f},biotopeTolerances:{0:1,1:.5,2:.5,3:.5,4:.5,5:.5,6:.1,7:.5},optimalTemperature:200,backstory:null,profilePictureKey:null,tileIndex:null,color:16711680}];class b extends Error{constructor(e){super(e)}}function y(e,s){if(!e)throw console.error(s),new b(s)}class x{constructor(e,s){this.x=e,this.y=s,this.deadBiomass=10,this.co2=1e3,this.o2=10,this.h2o=1e3,this.temperature=200,this.solarEnergy=1,this._species=[]}sumLivingBiomass(){return this._species.reduce((e,s)=>e+s.biomass,0)}get species(){return this._species}addSpecies(e,s){const t=this._species.find(s=>s.speciesId===e);t?(t.biomass+=s,this.sortSpecies()):(this._species.push({speciesId:e,biomass:s}),this.maxSpeciesCheck())}maxSpeciesCheck(){if(this.sortSpecies(),this._species.length>8){const e=this._species.pop();this.deadBiomass+=e.biomass}}sortSpecies(){this._species.sort((e,s)=>s.biomass-e.biomass)}speciesToString(){return this._species.map(e=>`${e.speciesId}: ${e.biomass.toFixed(1)} `).join()}toString(){return`[${this.x}, ${this.y}] CO2: ${this.co2.toFixed(1)} H2O: ${this.h2o.toFixed(1)} O2: ${this.o2.toFixed(1)} Organic: ${this.deadBiomass.toFixed(1)} Species: `+this.speciesToString()}growAndDie(){for(const e of this._species){const s=g[e.speciesId];if(s.role===d){const s=3e-4*Math.min(this.co2,this.h2o),t=Math.min(e.biomass*s,this.co2,this.o2);y(t>=0),this.co2-=t,this.h2o-=t,this.o2+=t,e.biomass+=t,y(e.biomass>=0)}else if(s.role===p)for(const t of this._species){if(t.speciesId===e.speciesId)continue;if(s.interactionMap[t.speciesId]===u){const s=.001*t.biomass,i=Math.min(e.biomass*s,t.biomass);y(i>=0),t.biomass-=i,e.biomass+=i,y(e.biomass>=0),y(t.biomass>=0)}}else if(s.role===l){const s=.001*this.deadBiomass,t=Math.min(e.biomass*s,this.deadBiomass);y(t>=0),this.deadBiomass-=t,e.biomass+=t,y(this.deadBiomass>=0),y(e.biomass>=0)}if(s.role!==d){const s=.001*Math.min(e.biomass,this.o2),t=Math.min(e.biomass,e.biomass*s,this.o2);y(t>=0),this.o2-=t,e.biomass-=t,this.h2o+=t,this.co2+=t,y(this.deadBiomass>=0),y(e.biomass>=0)}const t=1;{y(e.biomass>=0,`Wrong value ${e.biomass} ${e.speciesId}`);const s=.01/t,i=Math.min(e.biomass*s,e.biomass);y(i>=0),this.deadBiomass+=i,e.biomass-=i,y(e.biomass>=0)}y(e.biomass>=0)}y(this.o2>=0),y(this.co2>=0),y(this.h2o>=0),y(this.deadBiomass>=0),this.sortSpecies()}migrateTo(e){if(0!==this._species.length)for(const s of this._species){const t=.01*s.biomass;e.addSpecies(s.speciesId,t),s.biomass-=t}}}const w=(e,s)=>new x(e,s);class _{constructor(e,s,t=w){this.cellFactory=t,this.width=e,this.height=s,this._prepareGrid()}_prepareGrid(){this._data=new Array(this.width*this.height);for(let e=0;e<this.width;++e)for(let s=0;s<this.height;++s)this._data[this._index(e,s)]=this.cellFactory(e,s)}randomCell(){let e=h(this._data.length);return this._data[e]}_index(e,s){return e+s*this.width}get(e,s){return this.inRange(e,s)?this._data[this._index(e,s)]:null}inRange(e,s){return e>=0&&s>=0&&e<this.width&&s<this.height}*eachNode(){for(const e of this._data)e&&(yield e)}*getAdjacent(e){let s=0,t=-1;const i=e.x,o=e.y;for(const e of[1,2,4,8]){const r=(i+s+this.width)%this.width,a=o+t;if(a>=0&&a<this.height){const s=this._data[this._index(r,a)];yield[e,s]}[s,t]=[-t,s]}}}class S{}let v=0;class M{constructor(){this.id=v++,this.dna="",this.calculateProperties()}calculateProperties(){}}class k{constructor(){this.grid=new _(20,10),this.species={},this.planet=new S,this.init(),this.tickCounter=0}init(){for(let e=0;e<4;++e){const e=this.createSpecies();for(let s=0;s<5;++s){this.grid.randomCell().addSpecies(e.id,100)}}}createSpecies(){const e=new M;return this.species[e.id]=e,e}tick(){this.growAndDie(),this.interact(),this.evolve(),this.migrate(),this.updatePlanet(),this.tickCounter+=1}growAndDie(){for(const e of this.grid.eachNode())e.growAndDie()}interact(){}evolve(){}migrate(){for(const e of this.grid.eachNode())for(const[,s]of this.grid.getAdjacent(e))e.migrateTo(s)}updatePlanet(){}}class O extends o.a.GameObjects.Graphics{constructor(e,s,t){super(e,t),this.grid=s,this.prop=()=>1,this.colorMap=e=>131329*Math.floor(127*e),this.update()}setProp(e){this.prop=e}setColorMap(e){this.colorMap=e}minMax(e){let s=1/0,t=-1/0;for(const i of this.grid.eachNode()){const o=e(i);o<s&&(s=o),o>t&&(t=o)}return{min:s,max:t}}update(){function e(e,s,t){const i=t-s;return i?(e-s)/i:0}this.clear();const s=this.prop,t=this.colorMap,{min:i,max:o}=this.minMax(s);for(const r of this.grid.eachNode()){const a=32*r.x,n=32*r.y,c=t(e(s(r),i,o));this.fillStyle(c,1),this.fillRect(a,n,31,31)}}}class B extends o.a.GameObjects.Graphics{constructor(e,s,t){super(e,t),this.grid=s,this.prop=()=>1,this.update()}update(){this.clear();for(const e of this.grid.eachNode()){const s=32*e.x+16,t=32*e.y+16;let i=-8,o=8;for(const{speciesId:r,biomass:a}of e.species.slice(0,4)){if(a<50)continue;const e=g[r].color;this.fillStyle(e,1),this.fillCircle(s+i,t+o,8),[i,o]=[-o,i]}}}}var P=class extends o.a.Scene{constructor(){super({key:"GameScene"})}init(){this.sim=new k,this.time.addEvent({delay:500,callback:()=>this.tickAndLog(),loop:!0}),this.currentCell=this.sim.grid.get(0,0)}preload(){}create(){this.add.text(0,0,"Exo Keeper",{font:"32px Bangers",fill:"#7744ff"}),this.logElement=document.getElementById("log"),this.gridView=new O(this,this.sim.grid,{x:100,y:100}),this.speciesView=new B(this,this.sim.grid,{x:100,y:100}),this.gridView.setProp(e=>e.sumLivingBiomass()),this.add.existing(this.gridView),this.add.existing(this.speciesView)}tickAndLog(){this.sim.tick(),this.gridView.update(),this.speciesView.update(),this.logElement.innerText=`Tick: ${this.sim.tickCounter}\n${this.currentCell}`}update(){}},T={type:o.a.AUTO,parent:"content",width:800,height:600,localStorageName:"phaseres6webpack"};const j=Object.assign(T,{scene:[n,c,P]});class I extends o.a.Game{constructor(){super(j)}}window.game=new I}});